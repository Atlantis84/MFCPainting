// PenTest.cpp: 实现文件
//

#include "pch.h"
#include "MFCPainting.h"
#include "PenTest.h"
#include "afxdialogex.h"


// PenTest 对话框

IMPLEMENT_DYNAMIC(PenTest, CDialogEx)

PenTest::PenTest(CWnd* pParent /*=nullptr*/)
	: CDialogEx(IDD_PEN_DLG, pParent)
{
}

PenTest::~PenTest()
{
}

void PenTest::DoDataExchange(CDataExchange* pDX)
{
	CDialogEx::DoDataExchange(pDX);
	DDX_Control(pDX, IDC_COMBO1, m_pStyle);
	DDX_Control(pDX, IDC_COMBO_FORECOLOR, m_pForeColor);
	DDX_Control(pDX, IDC_COMBO_BACKCOLOR, m_pBackColor);
}


BEGIN_MESSAGE_MAP(PenTest, CDialogEx)
	ON_WM_PAINT()
	ON_CBN_SELCHANGE(IDC_COMBO_FORECOLOR, &PenTest::OnSelchangeComboForecolor)
	ON_CBN_SELCHANGE(IDC_COMBO_BACKCOLOR, &PenTest::OnSelchangeComboBackcolor)
	ON_CBN_SELCHANGE(IDC_COMBO1, &PenTest::OnSelchangeCombo1)
END_MESSAGE_MAP()

void PenTest::OnPaint()
{
	CPaintDC dc(this); 
	CRect crt;
	GetClientRect(&crt);
	Graphics graphics(dc);
	Gdiplus::HatchBrush hra(m_pHatchStyle, 
		Color(GetRValue(m_pForeColorRef), GetGValue(m_pForeColorRef), GetBValue(m_pForeColorRef)), 
		Color(GetRValue(m_pBackColorRef), GetGValue(m_pBackColorRef), GetBValue(m_pBackColorRef)));

	graphics.FillEllipse(&hra, 0, crt.Height() / 2, crt.Width(), crt.Height() / 2);
}

BOOL PenTest::OnInitDialog()
{
	CDialogEx::OnInitDialog();
	
	m_pStyle.InsertString(0, _T("HatchStyleHorizontal"));
	m_pStyle.InsertString(1, _T("HatchStyleForwardDiagonal"));
	m_pStyle.InsertString(2, _T("HatchStyleDiagonalCross"));
	m_pStyle.InsertString(3, _T("HatchStyle50Percent"));
	m_pStyle.InsertString(4, _T("HatchStyleLightDownwardDiagonal"));
	m_pStyle.InsertString(5, _T("HatchStyleDarkDownwardDiagonal"));
	m_pStyle.InsertString(6, _T("HatchStyleWideDownwardDiagonal"));
	m_pStyle.InsertString(7, _T("HatchStyleLightVertical"));
	m_pStyle.InsertString(8, _T("HatchStyleNarrowVertical"));
	m_pStyle.SetCurSel(0);

	m_pForeColor.AddItem(_T("紫色"), RGB(128, 0, 128));
	m_pForeColor.AddItem(_T("青色"), RGB(0, 255, 255));
	m_pForeColor.AddItem(_T("红色"), RGB(255, 0, 0));
	m_pForeColor.AddItem(_T("蓝色"), RGB(0, 0, 255));
	m_pForeColor.AddItem(_T("绿色"), RGB(0, 255, 0));
	m_pForeColor.AddItem(_T("黄色"), RGB(255, 255, 0));
	m_pForeColor.AddItem(_T("粉色"), RGB(255, 0, 255));
	m_pForeColor.AddItem(_T("棕色"), RGB(255, 128, 64));
	m_pForeColor.SetCurSel(0);

	m_pBackColor.AddItem(_T("紫色"), RGB(128, 0, 128));
	m_pBackColor.AddItem(_T("青色"), RGB(0, 255, 255));
	m_pBackColor.AddItem(_T("红色"), RGB(255, 0, 0));
	m_pBackColor.AddItem(_T("蓝色"), RGB(0, 0, 255));
	m_pBackColor.AddItem(_T("绿色"), RGB(0, 255, 0));
	m_pBackColor.AddItem(_T("黄色"), RGB(255, 255, 0));
	m_pBackColor.AddItem(_T("粉色"), RGB(255, 0, 255));
	m_pBackColor.AddItem(_T("棕色"), RGB(255, 128, 64));
	m_pBackColor.SetCurSel(0);

	m_pForeColorRef = RGB(255, 0, 0);
	m_pBackColorRef = RGB(0, 0, 0);
	m_pHatchStyle = HatchStyleNarrowVertical;
	return TRUE;
				
}

void PenTest::OnSelchangeComboForecolor()
{
	m_pForeColorRef = m_pForeColor.GetItemData(m_pForeColor.GetCurSel());
	Invalidate();
}


void PenTest::OnSelchangeComboBackcolor()
{
	m_pBackColorRef = m_pBackColor.GetItemData(m_pBackColor.GetCurSel());
	Invalidate();
}


void PenTest::OnSelchangeCombo1()
{
	switch (m_pStyle.GetCurSel()) {
	case 0:
		m_pHatchStyle = HatchStyleHorizontal;
		break;
	case 1:
		m_pHatchStyle = HatchStyleForwardDiagonal;
		break;
	case 2:
		m_pHatchStyle = HatchStyleDiagonalCross;
		break;
	case 3:
		m_pHatchStyle = HatchStyle50Percent;
		break;
	case 4:
		m_pHatchStyle = HatchStyleLightDownwardDiagonal;
		break;
	case 5:
		m_pHatchStyle = HatchStyleDarkDownwardDiagonal;
		break;
	case 6:
		m_pHatchStyle = HatchStyleWideDownwardDiagonal;
		break;
	case 7:
		m_pHatchStyle = HatchStyleLightVertical;
		break;
	case 8:
		m_pHatchStyle = HatchStyleNarrowVertical;
		break;
	}
	Invalidate();
}
